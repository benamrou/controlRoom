

module.exports = function (app, oracledb, connAttrs) {

var module = {};
var id = 0;

// Methode to execute Query
// Query: The query to execute containing bind variable
// Params: Parameters for the bind variables
module.execute = function (SQLquery, params, user, req, res) {

    id = id + 1;
    oracledb.getConnection(connAttrs, function (err, connection) {
        if (err) {
            // Error connecting to DB
            res.set('Content-Type', 'application/json');
            res.status(500).send(JSON.stringify({
                status: 500,
                message: "Database connection error ...",
                detailed_message: err.message
            }));
            return;
        }
        log(id, "Path request:" + req.path, user);
        log(id, "Executing query.... ", user);
        log(id, SQLquery, user);
        logParam(id, params, user);
        connection.execute(SQLquery, params, {
            autoCommit: true,
            outFormat: oracledb.OBJECT // Return the result as Object
        }, function (err, result) {
            if (err) {
                log(err, user);
                res.set('Content-Type', 'application/json');
                var status = err ? 500 : 404;
                res.status(status).send(JSON.stringify({
                    message: "Error retrieving data",
                    detailed_message: err ? err.message : ""
                }));
            } else {
                if (req.method == "GET") { // GET 
                    log(id, result.rows.length + " Object(s) returned...", user);
                }
                else { // else PUT POST 
                    log(id, result.rowsAffected + " Object(s) updated...", user);
                }

                res.set('Content-Type', 'application/json');
                res.status(200).send(JSON.stringify(result.rows));
            }
            // Release the connection
            connection.release(
                function (err) {
                    if (err) {
                        console.error(err.message);
                    } 
                });
        });
    });
    };


// Methode to execute Query
// Query: The query to execute containing bind variable
// Params: Parameters for the bind variables
module.executeLibQuery = function (SQLquery, params, user, req, res) {

    id = id + 1;
    oracledb.getConnection(connAttrs, function (err, connection) {
        if (err) {
            // Error connecting to DB
            res.set('Content-Type', 'application/json');
            res.status(500).send(JSON.stringify({
                status: 500,
                message: "Database connection error ...",
                detailed_message: err.message
            }));
            return;
        }
        log(id, "Path request:" + req.path, user);
        log(id, "Executing query.... ", user);
        SQLquery = "PKREQUESTMANAGER.CALLQUERY(1," + user + "," +
             SQLquery + ","  + params + ")";
        log(id, SQLquery, user);
        logParam(id, params, user);
        //connection.execute(SQLquery,
        connection.execute("PKREQUESTMANAGER.CALLQUERY(1,'abe','ADM0000002','');",  
            [], // no bind variables
            //params, 
            { resultSet: true }, // return a result set.  Default is false
            {
            autoCommit: true,
            outFormat: oracledb.OBJECT // Return the result as Object
        }, function (err, result) {
            if (err) {
                log(err, user);
                // close the cursor
                result.outBinds.cursor.close();
                res.set('Content-Type', 'application/json');
                var status = err ? 500 : 404;
                res.status(status).send(JSON.stringify({
                    message: "Error retrieving data",
                    detailed_message: err ? err.message : ""
                }));
            } else {
                //fetchRowsFromRS(connection, result.outBinds.cursor, numRows);
                
                myResult = result.outBinds.cursor.getRows();
                result.outBinds.cursor.close();

                if (req.method == "GET") { // GET 
                    log(id, myResult.length + " Object(s) returned...", user);
                }
                else { // else PUT POST 
                    log(id, result.rowsAffected + " Object(s) updated...", user);
                }

                res.set('Content-Type', 'application/json');
                res.status(200).send(JSON.stringify(myResult));
            }
            // Release the connection
            connection.release(
                function (err) {
                    if (err) {
                        console.error(err.message);
                    } 
                });
        });
    });
    };

    function fetchRowsFromRS(connection, resultSet, numRows)
    {
      resultSet.getRows( // get numRows rows
        numRows,
        function (err, rows)
        {
          if (err) {
             resultSet.close();           // close the result set and release the connection
          } else if (rows.length == 0) {  // no rows, or no more rows
            resultSet.close();            // close the result set and release the connection
          } else if (rows.length > 0) {
            console.log(rows);
            fetchRowsFromRS(connection, resultSet, numRows);  // get next set of rows
          }
        });
    }


    function log (uniqueId, message, username) {
        var date = new Date();
        var timestamp = (date.getMonth() + 1) + '/' + date.getDate() + '/' +  
                        date.getFullYear() + " " + date.getHours() + ":" + 
                        date.getMinutes() + ":" + date.getSeconds();
        console.log(timestamp + " [" + username + "] " + uniqueId  + ": " + message);
        logFile(uniqueId, timestamp + " " + uniqueId  + ": " + message + "\r\n", username);
    }

    function logParam (uniqueId, parameters, username) {
        log(id,"\r\n", username);
        console.dir(parameters, {showHidden: false, depth: null});;
        logFile(uniqueId, JSON.stringify(parameters) + "\r\n", username);

    }

    function logFile(uniqueId, message, username) {
        var date = new Date();
        var timestamp = (date.getFullYear() + "." + (date.getMonth() + 1) + '.' + date.getDate());
        var fs = require('fs-extra'); // File management

        fs.appendFileSync('logs/admin/' + timestamp + "/" + username + ".log", message, 'utf8', function (err) {
            if (err) {
                console.log(err);
            }
        });

    }

module.log = function (message, username) {
        log(id, message,username);
    }
  
    return module;
};